<?php

/**
 * @file
 * Commerce Discount Saleprice tests.
 */

/**
 * Testing commerce discounts functionality.
 */
class CommerceDiscountSalepriceTest extends CommerceDiscountTestBase {
  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Commerce Discount Sale Price',
      'description' => 'Test saleprice discounts functionality',
      'group' => 'Commerce Discount',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    $this->sub_module = 'commerce_discount_saleprice';
    parent::setUp();
  }

  /**
   * Overriding parent method that causes tests to fail.
   */
  protected function createUserWithPermissionHelper($set) {
    return $this->drupalCreateUser();
  }

  /**
   * Create a discount.
   *
   * @param string $discount_type
   *   The discount type; Either 'order_discount' or 'product_discount'.
   * @param string $offer_type
   *   The discount offer type; Either 'fixed_amount' or 'percentage'.
   * @param int $percentage
   *   The discount offer percentage.
   * @param int $limit
   *   The discount offer limit.
   * @param string $name
   *   Discount name - Optional. If given, CANNOT start with a number.
   * @param string $component_title
   *   Component title - Optional.
   *
   * @return object
   *   The newly created commerce_discount entity.
   */
  protected function createDiscount($discount_type, $offer_type, $percentage, $limit = '', $name = '', $component_title = '', $sort_order = 10) {
    // Create the discount offer.
    $commerce_discount_offer = entity_create('commerce_discount_offer', array('type' => $offer_type));
    $offer_wrapper = entity_metadata_wrapper('commerce_discount_offer', $commerce_discount_offer);
    $offer_wrapper->commerce_percentage = $percentage;
    if ($limit) {
      $offer_wrapper->commerce_fixed_amount->amount = $limit;
      $offer_wrapper->commerce_fixed_amount->currency_code = 'USD';
    }
    $offer_wrapper->save();

    // Provide default name.
    $name = $name ? $name : $discount_type . '_' . $offer_type;
    $component_title = $component_title ? $component_title : $name;

    // Create the discount.
    $values = array(
      'name' => $name,
      'label' => $name,
      'type' => $discount_type,
      'sort_order' => $sort_order,
      'component_title' => $component_title,
      'status' => TRUE,
      'export_status' => TRUE,
    );
    $commerce_discount = entity_create('commerce_discount', $values);
    $discount_wrapper = entity_metadata_wrapper('commerce_discount', $commerce_discount);
    $discount_wrapper->commerce_discount_offer = $commerce_discount_offer;
    $discount_wrapper->save();

    return $discount_wrapper->value();
  }


  /**
   * Test built-in discount.
   */
  public function testCommerceDSPBuiltinDiscountCreated() {
    $discounts = commerce_discount_entity_list();
    $this->assertTrue(isset($discounts['discount_saleprice']), t('Built-in discount created.'));
  }

  /**
   * Test percentage order discounts.
   */
  public function testCommerceDSPExclSimpleDiscount() {
    // Testing percentage discount.
    // Create a percentage order discount of 20%.
    $discount = $this->createDiscount('order_discount', 'percentage_excl', 20, '', 'pes');
    // Create a $100 product.
    $product1 = $this->createDummyProduct('', '', 100, 'USD');
    // Create a $50 product.
    $product2 = $this->createDummyProduct('', '', 50, 'USD');
    // Create a cart order.
    $order = $this->createDummyOrder($this->store_customer->uid, array($product1->product_id => 5, $product2->product_id => 2));

    // Recalculate discounts.
    $order_wrapper = commerce_cart_order_refresh($order);

    $this->assertTrue($this->discountAppliedToOrder('pes', $order), t('Percentage order discount applied to order'));

    // Check if the discount was applied on the order total price.
    $this->assertEqual($order_wrapper->commerce_order_total->amount->value(), 480, 'Percentage order discount is deducted correctly.');

    // Disable the discount.
    $discount->status = FALSE;
    entity_save('commerce_discount', $discount);

    // Re-save the order.
    // Check if the discount was applied on the order total price.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $order_wrapper->save();

    // Recalculate discounts.
    $order_wrapper = commerce_cart_order_refresh($order);
    $this->assertEqual($order_wrapper->commerce_order_total->amount->value(), 600, 'Percentage order discount is removed when it\'s not applicable.');
  }

  /**
   * Test limited percentage order discounts.
   */
  public function testCommerceDSPtExclLimitedDiscount() {
    // Testing percentage discount.
    // Create a percentage order discount of 20% limited with 100$.
    $discount = $this->createDiscount('order_discount', 'percentage_excl', 20, 100, 'pel');
    // Create a $100 product.
    $product1 = $this->createDummyProduct('', '', 100, 'USD');
    // Create a $50 product.
    $product2 = $this->createDummyProduct('', '', 50, 'USD');
    // Create a cart order.
    $order = $this->createDummyOrder($this->store_customer->uid, array($product1->product_id => 5, $product2->product_id => 2));

    // Recalculate discounts.
    $order_wrapper1 = commerce_cart_order_refresh($order);

    $this->assertTrue($this->discountAppliedToOrder('pel', $order), t('Limited percentage order discount applied to order'));

    // Check if the discount was applied on the order total price.
    $this->assertEqual($order_wrapper1->commerce_order_total->amount->value(), 500, 'Limited percentage order discount is deducted correctly.');

    // Disable the discount.
    $discount->status = FALSE;
    entity_save('commerce_discount', $discount);

    // Re-save the order.
    // Check if the discount was applied on the order total price.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $order_wrapper->save();

    // Recalculate discounts.
    $order_wrapper = commerce_cart_order_refresh($order);
    $this->assertEqual($order_wrapper->commerce_order_total->amount->value(), 600, 'Percentage order discount is removed when it\'s not applicable.');
  }

  /**
   * Test exclusive percentage order discounts.
   */
  public function testCommerceDSPRealExclusiveDiscount() {
    // Testing percentage discount.
    // Create a percentage order discount of 20%.
    $discount = $this->createDiscount('order_discount', 'percentage_excl', 20, '', 'pes');
    // Create a $100 product.
    $product1 = $this->createDummyProduct('', '', 100, 'USD');
    $product1->field_commerce_saleprice[LANGUAGE_NONE][0]['amount'] = 60;
    $product1->field_commerce_saleprice[LANGUAGE_NONE][0]['currency_code'] = 'USD';
    $product1->field_commerce_saleprice_on_sale[LANGUAGE_NONE][0]['value'] = TRUE;
    commerce_product_save($product1);

    // Create a $50 product.
    $product2 = $this->createDummyProduct('', '', 50, 'USD');
    // Create a cart order.
    $order = $this->createDummyOrder($this->store_customer->uid, array($product1->product_id => 5, $product2->product_id => 2));

    // Recalculate discounts.
    $order_wrapper = commerce_cart_order_refresh($order);

    $this->assertTrue($this->discountAppliedToOrder('pes', $order), t('Exclusive percentage order discount applied to order'));

    // Check if the discount was applied on the order total price.
    $this->assertEqual($order_wrapper->commerce_order_total->amount->value(), 380, 'Exclusive percentage order discount is deducted correctly.');

    // Disable the discount.
    $discount->status = FALSE;
    entity_save('commerce_discount', $discount);

    // Re-save the order.
    // Check if the discount was applied on the order total price.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $order_wrapper->save();

    // Recalculate discounts.
    $order_wrapper = commerce_cart_order_refresh($order);
    $this->assertEqual($order_wrapper->commerce_order_total->amount->value(), 400, 'Exclusive percentage order discount is removed when it\'s not applicable.');
  }

}
